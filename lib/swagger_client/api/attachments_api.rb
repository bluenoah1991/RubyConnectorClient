=begin
#Microsoft Bot Connector API - v3.0

#﻿The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector/Swagger/ConnectorAPI.json)    © 2016 Microsoft

OpenAPI spec version: v3
Contact: botframework@microsoft.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class AttachmentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # GetAttachment
    # Get the named view as binary content
    # @param attachment_id attachment id
    # @param view_id View id from attachmentInfo
    # @param [Hash] opts the optional parameters
    # @return [String]
    def attachments_get_attachment(attachment_id, view_id, opts = {})
      data, _status_code, _headers = attachments_get_attachment_with_http_info(attachment_id, view_id, opts)
      return data
    end

    # GetAttachment
    # Get the named view as binary content
    # @param attachment_id attachment id
    # @param view_id View id from attachmentInfo
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def attachments_get_attachment_with_http_info(attachment_id, view_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttachmentsApi.attachments_get_attachment ..."
      end
      # verify the required parameter 'attachment_id' is set
      fail ArgumentError, "Missing the required parameter 'attachment_id' when calling AttachmentsApi.attachments_get_attachment" if attachment_id.nil?
      # verify the required parameter 'view_id' is set
      fail ArgumentError, "Missing the required parameter 'view_id' when calling AttachmentsApi.attachments_get_attachment" if view_id.nil?
      # resource path
      local_var_path = "/v3/attachments/{attachmentId}/views/{viewId}".sub('{format}','json').sub('{' + 'attachmentId' + '}', attachment_id.to_s).sub('{' + 'viewId' + '}', view_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bot_to_connector']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttachmentsApi#attachments_get_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetAttachmentInfo
    # Get AttachmentInfo structure describing the attachment views
    # @param attachment_id attachment id
    # @param [Hash] opts the optional parameters
    # @return [AttachmentInfo]
    def attachments_get_attachment_info(attachment_id, opts = {})
      data, _status_code, _headers = attachments_get_attachment_info_with_http_info(attachment_id, opts)
      return data
    end

    # GetAttachmentInfo
    # Get AttachmentInfo structure describing the attachment views
    # @param attachment_id attachment id
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttachmentInfo, Fixnum, Hash)>] AttachmentInfo data, response status code and response headers
    def attachments_get_attachment_info_with_http_info(attachment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: AttachmentsApi.attachments_get_attachment_info ..."
      end
      # verify the required parameter 'attachment_id' is set
      fail ArgumentError, "Missing the required parameter 'attachment_id' when calling AttachmentsApi.attachments_get_attachment_info" if attachment_id.nil?
      # resource path
      local_var_path = "/v3/attachments/{attachmentId}".sub('{format}','json').sub('{' + 'attachmentId' + '}', attachment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bot_to_connector']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AttachmentInfo')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttachmentsApi#attachments_get_attachment_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
