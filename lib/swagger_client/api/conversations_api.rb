=begin
#Microsoft Bot Connector API - v3.0

#﻿The Bot Connector REST API allows your bot to send and receive messages to channels configured in the  [Bot Framework Developer Portal](https://dev.botframework.com). The Connector service uses industry-standard REST  and JSON over HTTPS.    Client libraries for this REST API are available. See below for a list.    Many bots will use both the Bot Connector REST API and the associated [Bot State REST API](/en-us/restapi/state). The  Bot State REST API allows a bot to store and retrieve state associated with users and conversations.    Authentication for both the Bot Connector and Bot State REST APIs is accomplished with JWT Bearer tokens, and is  described in detail in the [Connector Authentication](/en-us/restapi/authentication) document.    # Client Libraries for the Bot Connector REST API    * [Bot Builder for C#](/en-us/csharp/builder/sdkreference/)  * [Bot Builder for Node.js](/en-us/node/builder/overview/)  * Generate your own from the [Connector API Swagger file](https://raw.githubusercontent.com/Microsoft/BotBuilder/master/CSharp/Library/Microsoft.Bot.Connector/Swagger/ConnectorAPI.json)    © 2016 Microsoft

OpenAPI spec version: v3
Contact: botframework@microsoft.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module SwaggerClient
  class ConversationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # CreateConversation
    # Create a new Conversation.    POST to this method with a  * Bot being the bot creating the conversation  * IsGroup set to true if this is not a direct message (default is false)  * Members array contining the members you want to have be in the conversation.    The return value is a ResourceResponse which contains a conversation id which is suitable for use  in the message payload and REST API uris.    Most channels only support the semantics of bots initiating a direct message conversation.  An example of how to do that would be:    ```  var resource = await connector.conversations.CreateConversation(new ConversationParameters(){ Bot = bot, members = new ChannelAccount[] { new ChannelAccount(\"user1\") } );  await connect.Conversations.SendToConversationAsync(resource.Id, new Activity() ... ) ;    ```
    # @param parameters Parameters to create the conversation from
    # @param [Hash] opts the optional parameters
    # @return [ResourceResponse]
    def conversations_create_conversation(parameters, opts = {})
      data, _status_code, _headers = conversations_create_conversation_with_http_info(parameters, opts)
      return data
    end

    # CreateConversation
    # Create a new Conversation.    POST to this method with a  * Bot being the bot creating the conversation  * IsGroup set to true if this is not a direct message (default is false)  * Members array contining the members you want to have be in the conversation.    The return value is a ResourceResponse which contains a conversation id which is suitable for use  in the message payload and REST API uris.    Most channels only support the semantics of bots initiating a direct message conversation.  An example of how to do that would be:    &#x60;&#x60;&#x60;  var resource &#x3D; await connector.conversations.CreateConversation(new ConversationParameters(){ Bot &#x3D; bot, members &#x3D; new ChannelAccount[] { new ChannelAccount(\&quot;user1\&quot;) } );  await connect.Conversations.SendToConversationAsync(resource.Id, new Activity() ... ) ;    &#x60;&#x60;&#x60;
    # @param parameters Parameters to create the conversation from
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceResponse, Fixnum, Hash)>] ResourceResponse data, response status code and response headers
    def conversations_create_conversation_with_http_info(parameters, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.conversations_create_conversation ..."
      end
      # verify the required parameter 'parameters' is set
      fail ArgumentError, "Missing the required parameter 'parameters' when calling ConversationsApi.conversations_create_conversation" if parameters.nil?
      # resource path
      local_var_path = "/v3/conversations".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(parameters)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_create_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetActivityMembers
    # Call this method to enumerate the members of an activity.     This REST API takes a ConversationId and a ActivityId, returning an array of ChannelAccount[] objects   which are the members of the particular activity in the conversation.
    # @param conversation_id Conversation ID
    # @param activity_id Activity ID
    # @param [Hash] opts the optional parameters
    # @return [Array<ChannelAccount>]
    def conversations_get_activity_members(conversation_id, activity_id, opts = {})
      data, _status_code, _headers = conversations_get_activity_members_with_http_info(conversation_id, activity_id, opts)
      return data
    end

    # GetActivityMembers
    # Call this method to enumerate the members of an activity.     This REST API takes a ConversationId and a ActivityId, returning an array of ChannelAccount[] objects   which are the members of the particular activity in the conversation.
    # @param conversation_id Conversation ID
    # @param activity_id Activity ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ChannelAccount>, Fixnum, Hash)>] Array<ChannelAccount> data, response status code and response headers
    def conversations_get_activity_members_with_http_info(conversation_id, activity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.conversations_get_activity_members ..."
      end
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_get_activity_members" if conversation_id.nil?
      # verify the required parameter 'activity_id' is set
      fail ArgumentError, "Missing the required parameter 'activity_id' when calling ConversationsApi.conversations_get_activity_members" if activity_id.nil?
      # resource path
      local_var_path = "/v3/conversations/{conversationId}/activities/{activityId}/members".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'activityId' + '}', activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ChannelAccount>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_get_activity_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # GetConversationMembers
    # Call this method to enumerate the members of a converstion.     This REST API takes a ConversationId and returns an array of ChannelAccount[] objects   which are the members of the conversation.
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<ChannelAccount>]
    def conversations_get_conversation_members(conversation_id, opts = {})
      data, _status_code, _headers = conversations_get_conversation_members_with_http_info(conversation_id, opts)
      return data
    end

    # GetConversationMembers
    # Call this method to enumerate the members of a converstion.     This REST API takes a ConversationId and returns an array of ChannelAccount[] objects   which are the members of the conversation.
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ChannelAccount>, Fixnum, Hash)>] Array<ChannelAccount> data, response status code and response headers
    def conversations_get_conversation_members_with_http_info(conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.conversations_get_conversation_members ..."
      end
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_get_conversation_members" if conversation_id.nil?
      # resource path
      local_var_path = "/v3/conversations/{conversationId}/members".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<ChannelAccount>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_get_conversation_members\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param conversation_id 
    # @param activity_id 
    # @param activity 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def conversations_reply_to_activity(conversation_id, activity_id, activity, opts = {})
      conversations_reply_to_activity_with_http_info(conversation_id, activity_id, activity, opts)
      return nil
    end

    # 
    # 
    # @param conversation_id 
    # @param activity_id 
    # @param activity 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def conversations_reply_to_activity_with_http_info(conversation_id, activity_id, activity, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.conversations_reply_to_activity ..."
      end
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_reply_to_activity" if conversation_id.nil?
      # verify the required parameter 'activity_id' is set
      fail ArgumentError, "Missing the required parameter 'activity_id' when calling ConversationsApi.conversations_reply_to_activity" if activity_id.nil?
      # verify the required parameter 'activity' is set
      fail ArgumentError, "Missing the required parameter 'activity' when calling ConversationsApi.conversations_reply_to_activity" if activity.nil?
      # resource path
      local_var_path = "/v3/conversations/{conversationId}/activities/{activityId}".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s).sub('{' + 'activityId' + '}', activity_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(activity)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_reply_to_activity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # SendToConversation
    # This method allows you to send a message to a conversation without refering to an activity.   This is useful to send an initial message to a conversation, or to add a message to the end of the conversation.
    # @param activity Activity to send
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def conversations_send_to_conversation(activity, conversation_id, opts = {})
      conversations_send_to_conversation_with_http_info(activity, conversation_id, opts)
      return nil
    end

    # SendToConversation
    # This method allows you to send a message to a conversation without refering to an activity.   This is useful to send an initial message to a conversation, or to add a message to the end of the conversation.
    # @param activity Activity to send
    # @param conversation_id Conversation ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def conversations_send_to_conversation_with_http_info(activity, conversation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.conversations_send_to_conversation ..."
      end
      # verify the required parameter 'activity' is set
      fail ArgumentError, "Missing the required parameter 'activity' when calling ConversationsApi.conversations_send_to_conversation" if activity.nil?
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_send_to_conversation" if conversation_id.nil?
      # resource path
      local_var_path = "/v3/conversations/{conversationId}/activities".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json', 'application/xml', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(activity)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_send_to_conversation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # UploadAttachment
    # This method allows you to upload an attachment directly into a channels blob storage.    This is useful because it allows you to store data in a compliant store when dealing with enterprises.    The response is a ResourceResponse which contains an AttachmentId which is suitable for using with the attachments api.
    # @param conversation_id Conversation ID
    # @param attachment_upload Attachment data
    # @param [Hash] opts the optional parameters
    # @return [ResourceResponse]
    def conversations_upload_attachment(conversation_id, attachment_upload, opts = {})
      data, _status_code, _headers = conversations_upload_attachment_with_http_info(conversation_id, attachment_upload, opts)
      return data
    end

    # UploadAttachment
    # This method allows you to upload an attachment directly into a channels blob storage.    This is useful because it allows you to store data in a compliant store when dealing with enterprises.    The response is a ResourceResponse which contains an AttachmentId which is suitable for using with the attachments api.
    # @param conversation_id Conversation ID
    # @param attachment_upload Attachment data
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourceResponse, Fixnum, Hash)>] ResourceResponse data, response status code and response headers
    def conversations_upload_attachment_with_http_info(conversation_id, attachment_upload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConversationsApi.conversations_upload_attachment ..."
      end
      # verify the required parameter 'conversation_id' is set
      fail ArgumentError, "Missing the required parameter 'conversation_id' when calling ConversationsApi.conversations_upload_attachment" if conversation_id.nil?
      # verify the required parameter 'attachment_upload' is set
      fail ArgumentError, "Missing the required parameter 'attachment_upload' when calling ConversationsApi.conversations_upload_attachment" if attachment_upload.nil?
      # resource path
      local_var_path = "/v3/conversations/{conversationId}/attachments".sub('{format}','json').sub('{' + 'conversationId' + '}', conversation_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json', 'text/json']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(attachment_upload)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResourceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConversationsApi#conversations_upload_attachment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
